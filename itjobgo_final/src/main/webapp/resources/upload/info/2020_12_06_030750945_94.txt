	//이름으로 조회 Controller
	public void searchName() {
		String userName =new MainView().searchInfo("이름");
		List<Member> list = service.searchName(userName);
		new MainView().printMember(list);
	}

	//서비스
	public List<Member> searchName(String userName){
		Connection conn = getConnection();
		List<Member> list = dao.searchName(conn, userName);
		close(conn);
		return list;
		
	}

//dao
public List<Member> searchID(Connection conn, String userId){
		
	PreparedStatement pstmt =null;
	List<Member>list = null;
	ResultSet rs = null;
		
		String sql = "SELECT * FROM MEMBER WHERE MEMBER_ID LIKE ? ";
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, "%"+userId+"%");
			list=new ArrayList();
			rs=pstmt.executeQuery();
			
		while(rs.next()) {
			Member m = new Member();
			m.setMemberId(rs.getString("member_id"));
			m.setMemberPwd(rs.getString("member_pwd"));
			m.setMemberName(rs.getString("member_name"));
			m.setGender(rs.getString("gender"));
			m.setAge(rs.getInt("age"));
			m.setEmail(rs.getString("email"));
			m.setPhone(rs.getString("phone"));
			m.setAddress(rs.getString("address"));
			m.setHobby(rs.getString("hobby"));
			m.setEnrollDate(rs.getDate("enroll_date"));
			
			list.add(m);
			
			
		}
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstmt);
		}
		return list;
}

//JDBCTemplate
=============================================
package com.jdbc.common;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCTemplate {
	//connection 객체를 만들어주는 기능
	//statement, preparedstatement, resultset객체 반환 메소드
	//rollback, commit을 실행하는 메소드
	
	//공용으로 사용하는 기능을 구현 => static 메소드로 구현함
	
	//Connection 생성해서 반환해주는 메소드 
	public static Connection getConnection() {
		Connection conn =null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe",
					"student","student");
			//트렌젝션에 대한 옵션을 설정하기
			conn.setAutoCommit(false); //개발자가 트렌젝션 컨트롤하기위해서 설정
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return conn;
	}
	
	//객체를 반환하는 공통 메서드 작성
	//메소드 오버로딩을 하여  편리하게 객체를 닫을 수 있게 작성
	//connection
	public static void close(Connection conn) {
		try {
			if(conn!=null && !conn.isClosed()) {
				conn.close();
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	//preparedStatement 는 statement를 상속받고있다
	public static void close(Statement stmt) {
		try {
			if(stmt!=null && !stmt.isClosed()) {
				stmt.close();//Statement 와 PreparedStatemen 둘다 반환가능
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	//ResultSet 반환
	public static void close(ResultSet rs) {
		try {
			if(rs!=null && !rs.isClosed()) {
				rs.close();
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	//트렌젝션 관련 처리
	//COMMIT
	public static void commit(Connection conn) {
		try {
			if(conn!=null && !conn.isClosed()) {
				conn.commit();
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	//ROLLBACK
	public static void rollback(Connection conn) {
		try {
			if(conn!=null && !conn.isClosed()){
				conn.rollback();
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	
}
